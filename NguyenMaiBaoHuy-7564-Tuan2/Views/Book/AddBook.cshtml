@model NguyenMaiBaoHuy_7564_Tuan2.Models.Book

@{
    ViewBag.Title = "AddBook";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal pt-3">
        <h4>Information Book</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control text-center" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PublicYear, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PublicYear, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PublicYear, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group ">
            @Html.LabelFor(model => model.Cover, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <img src="/@Html.DisplayFor(model => model.Cover)" alt="thumnails" class=" img-cover" />
                <!-- Button trigger modal -->
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                    Choose Image
                </button>

                <!-- Modal -->
                <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg modal-dialog-scrollable">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="staticBackdropLabel">Uploads</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <nav>
                                        <div class="nav nav-tabs" id="nav-tab" role="tablist">
                                            <button class="nav-link active" id="nav-list-tab" data-bs-toggle="tab" data-bs-target="#nav-list" type="button" role="tab" aria-controls="nav-list" aria-selected="true">List Image</button>
                                            <button class="nav-link" id="nav-upload-tab" data-bs-toggle="tab" data-bs-target="#nav-upload" type="button" role="tab" aria-controls="nav-upload" aria-selected="false">Upload</button>
                                        </div>
                                    </nav>
                                    <div class="tab-content" id="nav-tabContent">
                                        <div class="tab-pane fade show active" id="nav-list" role="tabpanel" aria-labelledby="nav-list-tab">
                                            <div class="row">
                                                @foreach (var item in ViewBag.ListImageBook)
                                                { 
                                                    <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 pb-3 pt-3">
                                                        <div class="choose-image card w-100 h-100" style="cursor:pointer">
                                                            <div class="card-body text-center">
                                                                <img src="@item.Value" alt="thumnails" class="w-75 h-75" />
                                                            </div>
                                                            <div class="card-footer text-center">
                                                                <p class="name-image">@item.Text</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        <div class="tab-pane fade" id="nav-upload" role="tabpanel" aria-labelledby="nav-upload-tab">
                                            <label for="formFileDisabled" class="form-label">Upload file</label>
                                            <input class="form-control" type="file" id="formFileDisabled" />
                                        </div>
                                    </div>
                                    
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" id="accept" class="btn btn-primary">Accept</button>
                                <button type="button" class="btn btn-danger" id="canel-choose">Cancel</button>
                            </div>
                        </div>
                    </div>
                </div>
                @Html.EditorFor(model => model.Cover, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cover, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group pt-3">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "ListBook",new { @class= "text-decoration-none" })
</div>
<script>
    const chooseImage = document.querySelectorAll('.choose-image');
    const cancel = document.getElementById('canel-choose');
    const accept = document.getElementById('accept');
    const imgCover = document.querySelector('.img-cover');

    chooseImage.forEach((item) => {
        item.addEventListener('click', () => {
            const confirmation = confirm("Bạn có chắc chắn muốn chọn mục này?");
            if (confirmation) {
                item.classList.add('border', 'border-primary');
            }
        });
    });

    cancel.addEventListener('click', () => {
        const confirmation = confirm("Bạn có chắc chắn muốn huỷ?");
        if (confirmation) {
            chooseImage.forEach((item) => {
                item.classList.remove('border', 'border-primary');
            });
        }
    });


    document.addEventListener("DOMContentLoaded", () => {
        accept.addEventListener('click', () => {

            chooseImage.forEach((item) => {
                if (item.classList.contains('border', 'border-primary')) {
                    const img = item.querySelector('img'); // Lấy thẻ img trong mục đã chọn
                    if (img) {
                        const src = img.getAttribute('src'); // Lấy giá trị của thuộc tính src
                        console.log(src);
                        imgCover.classList.remove('d-none');
                        imgCover.classList.add('d-block');
                        $(".img-cover").attr("src", src);
                        console.log(src);
                        $("input[name='Cover']").val(src);
                    }
                }
            })
        });

    })

    function createBook(item) {
        let result = confirm("Are you sure create book?");
        if (result) {
            window.location.href = '@Url.Action("AddBook", "Book")/' + item;
        }
    }
</script>